---
- hosts: all
  name: Executing tasks

  tasks:
#  - name: Needed configuration for Roll-Back
#    file:
#      path: /usr/share/cis
#      state: directory
#      owner: root
#      group: root
#      mode: '0744'
#  - file:
#      path: /usr/share/cis/tasks-status.yml
#      owner: root
#      group: root
#      mode: '0644'
#      state: touch
#  - shell: "> /usr/share/cis/tasks-status.yml"
    
  - name: set suid on all world-wide directories
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
    register: result
  - name:
    debug:
      msg: "{{ result }}" 

  - name: check whether gpgcheck is configured correctly
    shell:   grep ^gpgcheck /etc/yum.repos.d/*
    register: result_2
  - debug:
      msg: "{{ result_2 }}"

  - name: check whether gpgcheck is configured correctly 
    shell:  rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'
    register: result_3
    ignore_errors: yes
  - debug:
      msg: "{{ result_3 }}"
 
  - name: check whether grub file exist
    stat:
      path: /boot/grub2/grub.cfg
    register: stat_result
  - copy:
      src: /boot/grub2/grub.cfg
      dest: /usr/share/cis
      remote_src: yes
    when: stat_result.stat.exists == True

  - name: setting required permission on grub
    file:
      path: /boot/grub2/grub.cfg
      owner: root
      group: root
      mode: '0644' 
    when: stat_result.stat.exists == True
    register: result_4

  - name: verify selinux=0 does not exist
    shell:  grep "^\s*linux=0" /boot/grub2/grub.cfg
    register: selinux_grub
    when: stat_result.stat.exists == True
    ignore_errors: yes
 
  #- name: check selinux configuration
  #  shell: grep "SELINUX=enforcing" /etc/selinux/config
  #  register: selinux_var
  #  ignore_errors: yes
  - name: setting selinux
    copy: 
      src: /etc/selinux/config
      dest: /usr/share/cis
     
  - selinux:
      policy: targeted
      state: enforcing 
  - debug:
      msg: "the var selinux_grub: {{ selinux_grub }}"


  - name: remove non needed params from /etc/default/grub
    copy:
      src: /etc/default/grub
      dest: /usr/share/cis
  - lineinfile:
       path: /etc/default/grub
       line: GRUB_CMDLINE_LINUX_DEFAULT="quiet"
       state: absent
    when: selinux_grub.stdout != ""

  - name: create new grub
    shell:  grub2-mkconfig -o /boot/grub2/grub.cfg
    when: selinux_grub.stdout != ""

  - debug: 
      msg: "{{ result_4 }}"
    when: result_4 
  
  - name: checking nologin in single-user mode
    copy:
       src: /usr/lib/systemd/system/emergency.service
       dest: /usr/share/cis
  - shell: grep /sbin/sulogin /usr/lib/systemd/system/emergency.service
    register: check
    ignore_errors: yes

  - debug: msg="WARNING"
    when: check is not defined
  - name: reconfiguring single-user mode
    lineinfile: 
       path: /usr/lib/systemd/system/emergency.service
       line: ExecStart=-/sbin/sulogin
       state: present
       insertafter: yes
    when: check is not defined



  - name: reconfiguring /etc/security/limits.conf
    copy:
      src: /etc/security/limits.conf
      dest: /usr/share/cis 
  - lineinfile:
      path: /etc/security/limits.conf
      line: "* hard core 0"
      state: present
      insertafter: yes

  - name: checking kernel param fs.suid_dumpable
    copy:
      src: /etc/sysctl.conf
      dest: /usr/share/cis
   
  - shell: sysctl -a | grep  "fs.suid_dumpable = 0"
    register: check_1
    ignore_errors: yes

  - debug: 
      msg: "the param is not defined properly {{ check_1 }}"
    when: check_1 is not defined
 
  
  - name: configure kernel param  fs.suid_dumpable
    sysctl:
     name: fs.suid_dumpable
     value: 0
     sysctl_set: yes
    when: check_1 is not defined



  - name: checking kernel param kernel.randomize_va_space
    shell: sysctl -a | grep "kernel.randomize_va_space = 2"
    register: check_2
    ignore_errors: yes

  - debug:
      msg: "the param is not defined properly {{ check_2 }}"
    when: check_2 is not defined

  - name: configure kernel param  kernel.randomize_va_space
    sysctl:
     name: kernel.randomize_va_space
     value: 2
     sysctl_set: yes
    when: check_2 is not defined

  - name: verify /etc/issue has no /r /m /s
    copy:
      src: /etc/issue
      dest: /usr/share/cis
  - shell:   egrep '(\\v|\\r|\\m|\\s)' /etc/issue
    register: check_issue
    ignore_errors: yes

  - name: reconfigure /etc/issue
    shell: echo "Authorized uses only. All activity may be monitored and reported." > /etc/issue
    when: check_issue.stdout != ""
 
  - name: verify /etc/issue.net has no /r /m /s
    copy: 
     src: /etc/issue.net
     dest: /usr/share/cis
  - shell:   egrep '(\\v|\\r|\\m|\\s)' /etc/issue.net
    register: check_issuenet
    ignore_errors: yes

  - name: reconfigure /etc/issue.net
    shell: echo "Authorized uses only. All activity may be monitored and reported." > /etc/issue.net
    when: check_issuenet.stdout != ""

  - name: setting required permission on /etc/motd
    copy:
     src: /etc/motd
     dest:  /usr/share/cis
  - file:
      path: /etc/motd
      owner: root
      group: root
      mode: '644'

  - name: setting required permission on /etc/issue
    file:
      path: /etc/issue
      owner: root
      group: root
      mode: '644'
  - name: setting required permission on /etc/issue.net
    file:
      path: /etc/issue.net
      owner: root
      group: root
      mode: '644'
  - name: ensure /etc/hosts.allow existence
    copy:
      src: /etc/hosts.allow
      dest: /usr/share/cis
  - file:
      path: /etc/hosts.allow 
      owner: root 
      group: root
      mode: '644'
  
  - name: ensure /etc/hosts.deny existence
    copy:
      src: /etc/hosts.deny
      dest: /usr/share/cis
  - file:
     path: /etc/hosts.deny
     owner: root
     group: root
     mode: '644'

  - name: verify /etc/issue.net has no /r /m /s
    shell:   yum list installed | grep -i gdm
    register: check_gdm
    ignore_errors: yes

    

  - name: reconfigure /etc/dconf/profile/gdm
    copy:
     src: /etc/dconf/profile/gdm
     dest: /usr/share/cis
     remote_src: yes
    when: check_gdm.stdout != ""
  - blockinfile:
      path: /etc/dconf/profile/gdm
      insertafter: 
      content: |
         user-db:user
         system-db:gdm
         file-db:/usr/share/gdm/greeter-dconf-defaults
    when: check_gdm.stdout != ""



  - name: reconfigure /etc/dconf/db/gdm.d/*
    copy:
     src: /etc/dconf/db/gdm.d
     dest: /usr/share/cis
    when: check_gdm.stdout != ""
  - blockinfile:
      path: /etc/dconf/db/gdm.d/*
      insertafter:
      content: |
          [org/gnome/login-screen]
          banner-message-enable=true
          banner-message-text='Authorized uses only. All activity may be monitored and
    when: check_gdm.stdout != ""
 

  - name: update system db
    shell:  dconf update
    when: check_gdm.stdout != ""
  
  - name: update security packages
    shell:  yum update --security

  - name: verify whether ntp or chrony is installed
    shell: yum list installed | grep ntp
    register: ntp_check
    ignore_errors: yes
  
  - debug: var=ntp_check
    when: ntp_check is defined

  - shell: yum list installed | grep chrony
    register: chrony_check
    ignore_errors: yes

  - name: install ntp
    shell: yum install ntp -y
    when: ntp_check.stdout == "" and chrony_check.stdout == ""
    register: ansible_facts

  - debug:
     msg: " the data are:  {{ ansible_facts['changed'] }}"
  - lineinfile:
        path: /usr/share/cis/tasks-status.yml
        line: "status1: {{ ansible_facts['changed'] }} ##ntp"
        state: present

  - name: check ntp configuration
    copy:
      src: /etc/ntp.conf
      dest: /usr/share/cis
      remote_src: yes
    when: ansible_facts['changed']
    #when: ntp_check.stdout == "" and chrony_check.stdout == "" 
  - shell: grep "^restrict" /etc/ntp.conf
    register: ntp_config_check
    ignore_errors: yes 
    when: ansible_facts['changed']
  #- debug: var2=ntp_config_check
  #  when: ntp_check.stdout == "" 
  #- debug: var=ntp_config_check 
  - name: configure ntp
    blockinfile:
      path: /etc/ntp.conf
      insertafter:
      content: |
          restrict -4 default kod nomodify notrap nopeer noquery
          restrict -6 default kod nomodify notrap nopeer noquery
    when: ansible_facts['changed']
    #when: ntp_config_check['stdout'] == "" and ntp_check.stdout != ""


  - name: checking kernel param net.ipv4.ip_forward
    shell: sysctl -a | grep  "net.ipv4.ip_forward = 0"
    register: check_net_forward
    ignore_errors: yes
  - shell: sysctl -w net.ipv4.ip_forward=0
    when: check_net_forward.stdout == ""
    notify:
      - setting net ipv4 flush param
    when: check_net_forward.stdout == ""


  - name: checking kernel net.ipv4.conf.all.send_redirects
    shell: sysctl -a | grep  "net.ipv4.conf.all.send_redirects = 0"
    register: net_all
    ignore_errors: yes
  - shell: sysctl -a | grep "net.ipv4.conf.default.send_redirects = 0"
    register: net_def
    ignore_errors: yes


  - shell: sysctl -w net.ipv4.conf.all.send_redirects=0
    when:  net_all.stdout == ""
    notify:
      - setting net ipv4 flush param

  - shell: sysctl -w net.ipv4.conf.default.send_redirects=0
    when: net_def.stdout == ""
    notify:
      - setting net ipv4 flush param



  - name: checking kernel net.ipv4.conf.all.send_redirects
    shell: sysctl -a | grep  "net.ipv4.conf.all.accept_source_route = 0"
    register: net_conf_all
    ignore_errors: yes
   
  - shell: sysctl -w net.ipv4.conf.all.accept_source_route=0
    when: net_conf_all.stdout == ""
    notify:
      - setting net ipv4 flush param


  - name: checking kernel net.ipv4.conf.all.send_redirects
    shell: sysctl -a | grep  "net.ipv4.conf.default.accept_source_route = 0"
    register: net_conf_def
    ignore_errors: yes
 
  - shell: sysctl -w net.ipv4.conf.default.accept_source_route=0
    when: net_conf_def.stdout == ""
    notify:
      - setting net ipv4 flush param


  - name: checking kernel net.ipv4.conf.all.secure_redirects
    shell: sysctl -a | grep  "net.ipv4.conf.all.secure_redirects = 0"
    register: net_sec_all
    ignore_errors: yes
  
  - shell: sysctl -w net.ipv4.conf.all.secure_redirects=0
    when: net_sec_all.stdout == ""
    notify:
       - setting net ipv4 flush param 

  - name: checking kernel net.ipv4.conf.default.secure_redirects
    shell: sysctl -a | grep  "net.ipv4.conf.default.secure_redirects = 0"
    register: net_sec_def
    ignore_errors: yes
 
  - shell: sysctl -w net.ipv4.conf.default.secure_redirects=0
    when: net_sec_def.stdout == ""
    notify:
       - setting net ipv4 flush param

  
  - name: checking kernel net.ipv4.conf.all.log_martians
    shell: sysctl -a | grep  "net.ipv4.conf.all.log_martians = 1"
    register: net_log_all
    ignore_errors: yes

  - shell: sysctl -w net.ipv4.conf.all.log_martians=1
    when: net_log_all.stdout == ""
    notify: 
      - setting net ipv4 flush param
  
  - name: checking kernel net.ipv4.conf.all.log_martians
    shell: sysctl -a | grep  "net.ipv4.conf.default.log_martians = 1"
    register: net_log_def
    ignore_errors: yes
  
  - shell: sysctl -w net.ipv4.conf.default.log_martians=1
    when: net_log_def.stdout == ""
    notify:
      - setting net ipv4 flush param

  - name: checking kernel net.ipv4.icmp_echo_ignore_broadcasts
    shell: sysctl -a | grep  "net.ipv4.icmp_echo_ignore_broadcasts = 1"
    register: broadcast
    ignore_errors: yes
 
  - shell: sysctl -2 net.ipv4.icmp_echo_ignore_broadcasts=1
    when: broadcast.stdout == ""
    notify:
     - setting net ipv4 flush param

  - name: checking kernel net.ipv4.icmp_ignore_bogus_error_responses
    shell: sysctl -a | grep  "net.ipv4.icmp_ignore_bogus_error_responses = 1"
    register: error_res
    ignore_errors: yes

  - shell: sysctl -w
    when: error_res.stdout == ""
    notify:
     - setting net ipv4 flush param

  - name: checking kernel net.ipv4.conf.all.rp_filter
    shell: sysctl -a | grep  "net.ipv4.conf.all.rp_filter = 1"
    register: all_filter
    ignore_errors: yes

  - shell: sysctl -w net.ipv4.conf.all.rp_filter=1
    when: all_filter.stdout == ""
    notify:
     - setting net ipv4 flush param

  - name: checking kernel net.ipv4.conf.default.rp_filter=1
    shell: sysctl -a | grep  "net.ipv4.conf.default.rp_filter = 1"
    register: def_filter
    ignore_errors: yes

  - shell: sysctl -w net.ipv4.conf.default.rp_filter=1=1
    when: def_filter.stdout == ""
    notify:
     - setting net ipv4 flush param

  - name: checking kernel net.ipv4.tcp_syncookies
    shell: sysctl -a | grep  "net.ipv4.tcp_syncookies = 1"
    register: syncookies
    ignore_errors: yes

  - shell: sysctl -w net.ipv4.tcp_syncookies
    when: syncookies.stdout == ""
    notify:
     - setting net ipv4 flush param

  - name: checking kernel net.ipv6.conf.all.accept_ra
    shell: sysctl -a | grep  "net.ipv6.conf.all.accept_ra = 0"
    register: ipv6_all
    ignore_errors: yes

  - shell: sysctl -w net.ipv6.conf.all.accept_ra=0
    when: ipv6_all.stdout == ""
    notify:
     - setting net ipv4 flush param

  - name: checking kernel net.ipv6.conf.default.accept_ra
    shell: sysctl -a | grep  "net.ipv6.conf.default.accept_ra = 0"
    register: ipv6_def
    ignore_errors: yes

  - shell: sysctl -w net.ipv6.conf.all.accept_ra=0
    when: ipv6_def.stdout == ""
    notify:
     - setting net ipv4 flush param

  - name: checking kernel net.ipv6.conf.all.accept_redirects
    shell: sysctl -a | grep  "net.ipv6.conf.all.accept_redirects = 0"
    register: ipv6_conf_all
    ignore_errors: yes

  - shell: sysctl -w net.ipv6.conf.all.accept_redirects=0
    when: ipv6_conf_all.stdout == ""
    notify:
     - setting net ipv4 flush param

  - name: verify and disable ipv6
    shell: grep "^\s*linux" /boot/grub2/grub.cfg | grep -i "ipv6.disable=1"
    register: ipv6_dis
    ignore_errors: yes
 
  - lineinfile:
      path: /etc/default/grub
      line: GRUB_CMDLINE_LINUX="ipv6.disable=1"
      insertafter: yes
      state: present
    when: ipv6_dis == ""
    notify:
      - name: sleep
      - name: update grub

  - name: configure auditd daemon to halt the system when the audit logs are full.
    copy:
      src: /etc/audit/auditd.conf
      dest: /usr/share/cis
      remote_src: yes

  - replace:
     path: /etc/audit/auditd.conf
     regexp: '(^admin_space_left_action\s)(.*)?$'
     replace: 'admin_space_left_action = halt'
     backup: yes
  - replace:
     path: /etc/audit/auditd.conf
     regexp: '(^action_mail_acct\s)(.*)?$'
     replace: 'action_mail_acct = root'
     backup: yes
  
  - replace:
       path: /etc/audit/auditd.conf
       regexp: '(^space_left_action\s)(.*)?$'
       replace: 'space_left_action = email' 
       backup: yes 
  
  - name: configure audit log file
    shell: grep max_log_file_action /etc/audit/auditd.conf
    register: max_log_check
    ignore_errors: yes
  - lineinfile:
        path: /etc/audit/auditd.conf
        line: max_log_file_action = keep_logs
        insertafter: yes
        state: present
    when: max_log_check.stdout == ""

  - name: ensure auditing for process
    shell: grep "^\s*linux" /boot/grub2/grub.cfg | grep -i audit=1
    register: audit_process
    ignore_errors: yes
  - lineinfile:
      path: /etc/default/grub
      line: GRUB_CMDLINE_LINUX="audit=1"
      insertafter: yes
      state: present
    when: audit_process.stdout == ""
    ignore_errors: yes
    notify:
       - name: update grub

  - name: check whether system is 32 or 64 arch
    shell: getconf LONG_BIT
    register: system_arch
    ignore_errors: yes
  - name: configure auditing system if system arch is 32
    blockinfile:
       path: /etc/audit/audit.rules
       insertafter: "^# END"
       content: |
           -w /var/log/wtmp -p wa -k logins
           -w /var/log/btmp -p wa -k logins
           -w /var/run/utmp -p wa -k session
           -w /var/log/wtmp -p wa -k logins
           -w /var/log/btmp -p wa -k logins
           #################
           #Ensure session initiation information
           #################
           -w /var/log/lastlog -p wa -k logins
           -w /var/run/faillock/ -p wa -k logins
           ##################
           #Monitor Login
           ##################
           -w /etc/selinux/ -p wa -k MAC-policy
           -w /usr/share/selinux/ -p wa -k MAC-policy
           ##################
           #MAC-policy
           ##################
           -w /etc/group -p wa -k identity
           -w /etc/passwd -p wa -k identity
           -w /etc/gshadow -p wa -k identity
           -w /etc/shadow -p wa -k identity
           -w /etc/security/opasswd -p wa -k identity
           #################
           -w /etc/selinux/ -p wa -k MAC-policy
           -w /usr/share/selinux/ -p wa -k MAC-policy
           ##################
           -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
           -w /etc/issue -p wa -k system-locale
           -w /etc/issue.net -p wa -k system-locale
           -w /etc/hosts -p wa -k system-locale
           -w /etc/sysconfig/network -p wa -k system-locale
           -w /etc/sysconfig/network-scripts/ -p wa -k system-locale
           ###################
           #FOR 32 SYSTEM ARCH
           ###################
           -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
           -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
           -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
           #####################
           #Ensure unsuccessful unauthorized file access attempts are collected
           ####################
           -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access 
           -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
           ##################
           #Ensure successful file system mounts are collected
           ##################
           -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts 
           ##################
           #Ensure file deletion events by users are collected
           ##################
           -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
           #################
           #Ensure changes to system administration scope
           #################
           -w /etc/sudoers -p wa -k scope
           -w /etc/sudoers.d/ -p wa -k scope
           ####################
           #Ensure system administrator actions
           ####################
           -w /var/log/sudo.log -p wa -k actions
           ####################
           #Ensure kernel module loading and unloading is collected
           ####################
           -w /sbin/insmod -p x -k modules
           -w /sbin/rmmod -p x -k modules
           -w /sbin/modprobe -p x -k modules
           -a always,exit -F arch=b32 -S init_module -S delete_module -k modules
           ####################
           #Ensure the audit configuration is immutable
           ####################
           -e 2
       state: present
    when: system_arch.stdout == "32"
  - name: configure auditing system if system arch is 64
    blockinfile:
       path: /etc/audit/audit.rules
       insertafter: "^# END"
       content: |
           -w /var/log/wtmp -p wa -k logins
           -w /var/log/btmp -p wa -k logins
           -w /var/run/utmp -p wa -k session
           -w /var/log/wtmp -p wa -k logins
           -w /var/log/btmp -p wa -k logins
           #################
           ##Ensure session initiation information
           ##################
           -w /var/log/lastlog -p wa -k logins
           -w /var/run/faillock/ -p wa -k logins
           ##################
           ##Monitor Login
           ###################
           -w /etc/selinux/ -p wa -k MAC-policy
           -w /usr/share/selinux/ -p wa -k MAC-policy
           ##################
           ##MAC-policy
           ###################
           -w /etc/group -p wa -k identity
           -w /etc/passwd -p wa -k identity
           -w /etc/gshadow -p wa -k identity
           -w /etc/shadow -p wa -k identity
           -w /etc/security/opasswd -p wa -k identity
           #############
           -w /etc/selinux/ -p wa -k MAC-policy
           -w /usr/share/selinux/ -p wa -k MAC-policy
           #############
           -a always,exit -F arch=b64 -S sethostname -S setdomainname -k system-locale
           -a always,exit -F arch=b32 -S sethostname -S setdomainname -k system-locale
           -w /etc/issue -p wa -k system-locale
           -w /etc/issue.net -p wa -k system-locale
           -w /etc/hosts -p wa -k system-locale
           -w /etc/sysconfig/network -p wa -k system-locale
           -w /etc/sysconfig/network-scripts/ -p wa -k system-locale
           ##############
           #For 64 systems arch
           ##############
           -a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
           -a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod
           -a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
           -a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod
           -a always,exit -F arch=b64 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
           -a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod
           ######################
           #Ensure unsuccessful unauthorized file access attempts are collected
           ######################
           -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k acces
           -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access
           -a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access
           -a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access     ####################
           #Ensure successful file system mounts are collected
           ####################
           -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
           -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
           ####################
           #Ensure file deletion events by users are collected
           ####################
           -a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
           -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
           ####################
           #Ensure changes to system administration scope
           ####################
           -w /etc/sudoers -p wa -k scope
           -w /etc/sudoers.d/ -p wa -k scope
           ####################
           #Ensure system administrator actions
           ####################
           -w /var/log/sudo.log -p wa -k actions
           ####################
           #Ensure kernel module loading and unloading is collected
           #####################
           -w /sbin/insmod -p x -k modules
           -w /sbin/rmmod -p x -k modules
           -w /sbin/modprobe -p x -k modules
           -a always,exit -F arch=b64 -S init_module -S delete_module -k modules
           ####################
           #Ensure the audit configuration is immutable
           ####################
           -e 2
       state: present
    when: system_arch.stdout == "64"

  - name: Ensure rsyslog default file permissions configured
    copy:
      src: /etc/rsyslog.conf
      dest: /usr/share/cis
      remote_src: yes
  - copy:
      src: /etc/rsyslog.d
      dest: /usr/share/cis

  - lineinfile:
      path: /etc/rsyslog.conf
      line: $FileCreateMode 0640
      state: present
      insertafter: yes
  #- lineinfile:
      #path: /etc/rsyslog.d/*.conf
      #line: $FileCreateMode 0640
      #state: present
      #insertafter: yes
  - lineinfile:
      path: /etc/rsyslog.conf
      line: "*.* @@loghost.example.com"
      state: present
      insertafter: yes 
    notify:
      - name: reload the rsyslogd configuration
  
  - name: Ensure use of privileged commands is collected
    shell: find item.mount -xdev \( -perm -4000 -o -perm -2000 \) -type f | awk '{print "-a always,exit -F path=" $1 " -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged" }'
    loop: "{{ ansible_mounts }}"
    when: item.mount == "/tmp"

  - name: Ensure syslog-ng default file permissions configured
    shell: ls /etc/syslog-ng/syslog-ng.conf
    register: file_exist
    ignore_errors: yes
  - copy:
      src: /etc/syslog-ng/syslog-ng.conf
      dest: /usr/share/cis
      remote_src: yes
    when: file_exist.stdout != ""
  - shell: grep ^options /etc/syslog-ng/syslog-ng.conf
    register: syslog_def_check
    ignore_errors: yes
  - lineinfile:
       path: /etc/syslog-ng/syslog-ng.conf
       line: options { chain_hostnames(off); flush_lines(0); perm(0640); stats_freq(3600); threaded(yes); };
       insertafter: yes
       state: present
    when: file_exist.stdout != "" and syslog_def_check.stdout == ""

  - name: Ensure syslog-ng is configured to send logs to a remote log host
    blockinfile:
       path: /etc/syslog-ng/syslog-ng.conf
       content: |
          destination logserver { tcp("logfile.example.com" port(514)); };
          log { source(src); destination(logserver); }; 
       insertafter: yes
       state: present
    when: file_exist.stdout != "" and syslog_def_check.stdout == ""
    notify:
       - name: reload the syslog-ng configuration
  - name: Ensure remote syslog-ng messages are only accepted on designated log hosts
    blockinfile:
       path: /etc/syslog-ng/syslog-ng.conf
       content: |
           source net{ tcp(); };
           destination remote { file("/var/log/remote/${FULLHOST}-log"); };
           log { source(net); destination(remote); };
       insertafter: yes
       state: present
    when: file_exist.stdout != "" and syslog_def_check.stdout == ""
    notify:
       - name: reload the syslog-ng configuration

  - name: Ensure permissions on all logfiles are configured
    shell: find /var/log -type f -exec chmod g-wx,o-rwx {} +

  - name: Ensure permissions on /etc/crontab are configured
    file:
       path: /etc/crontab
       owner: root
       group: root
       mode: '0600'
  - name: Ensure permissions on /etc/cron.hourly are configured
    file:
       path: /etc/cron.hourly
       owner: root
       group: root
       mode: '0700'
  - name: Ensure permissions on /etc/cron.daily are configured
    file:
       path: /etc/cron.daily
       owner: root
       group: root
       mode: '0700'
  - name: Ensure permissions on /etc/cron.weekly are configured
    file:
       path: /etc/cron.weekly 
       owner: root
       group: root
       mode: '0700'
  - name: Ensure permissions on /etc/cron.monthly are configured
    file:
       path: /etc/cron.monthly
       owner: root
       group: root
       mode: '0700'
  - name: Ensure permissions on /etc/cron.d are configured
    file:
       path: /etc/cron.d
       owner: root
       group: root
       mode: '0700'
  - name: Ensure at/cron is restricted to authorized users
    file:
       path: /etc/cron.deny
       owner: root
       group: root
       mode: '0600'
  - shell: ls /etc/cron.allow
    register: f_exist
    ignore_errors: yes
  - file:
       path: /etc/cron.allow
       owner: root
       group: root
       mode: '0600'
    when: f_exist.stdout != ""
    

  - name: set required perms on /etc/ssh/sshd_config
    file: 
       path: /etc/ssh/sshd_config
       owner: root
       group: root
       mode: '0600'
  
  - name: Ensure no world writable files exist
    shell: find item.mount  -xdev -type f -perm -0002
    loop: "{{ ansible_mounts }}"
    ignore_errors: yes
     

  - name: Ensure no unowned files or directories exist
    shell: find item.mount -xdev -nouser
    loop: "{{ ansible_mounts }}"
    ignore_errors: yes
 
  - name: Ensure no ungrouped files or directories exist
    shell: find item.mount -xdev -nogroup
    loop: "{{ ansible_mounts }}"
    ignore_errors: yes

  - name: Audit SUID executables
    shell: find item.mount -xdev -type f -perm -4000
    loop: "{{ ansible_mounts }}"
    ignore_errors: yes
 
  - name: Audit SGID executables
    shell: find item.mount -xdev -type f -perm -2000
    loop: "{{ ansible_mounts }}"
    ignore_errors: yes

  #- name: User and Group Settings
    #shell: cat /etc/shadow | awk -F: '($2 == "" ) { print $1 " does not have a password "}' 

  - name: ensure /etc/passwd is backed-up
    shell: ls /usr/share/cis/passwd
    register: passwd_backedup
    ignore_errors: yes
  - copy: 
     src: /etc/passwd
     dest: /usr/share/cis
     remote_src: yes
    when: passwd_backedup.stdout == ""

  - name: Ensure no legacy "+" entries exist in /etc/passwd
    shell: grep '^\+:' /etc/passwd
    register: legacy_entry
    ignore_errors: yes
  - lineinfile:
       path: /etc/passwd
       line: '^\+:'
       state: absent
    when: legacy_entry.stdout != ""
 
  - name: Ensure no legacy "+" entries exist in /etc/shadow
    shell: grep '^\+:' /etc/shadow
    register: legacy_entry_shadow
    ignore_errors: yes
  - lineinfile:
       path: /etc/shadow
       line: '^\+:'
       state: absent
    when: legacy_entry_shadow.stdout != "" 

  - name: Ensure no legacy "+" entries exist in /etc/group
    shell: grep '^\+:' /etc/group
    register: legacy_entry_group
    ignore_errors: yes
  - lineinfile:
       path: /etc/group
       line: '^\+:'
       state: absent
    when: legacy_entry_group.stdout != "" 
 
  - name: Ensure root is the only UID 0 account
    shell: "cat /etc/passwd | awk -F: '($3 == 0) { print $1 }'"
    register: root_check
    ignore_errors: yes
  - debug:
      msg: "warnning: The root is not the only user with Account ID=0"
    when: root_check.stdout != "root"

  - name: Ensure root PATH Integrity
    script: root_path_integrity.sh
    register: path_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING ROOT PATH NEEDS TO BE FIXED" 
    when: path_check.stdout != ""

  - name: Ensure all users' home directories exist
    script: users_home_dir.sh
    register: home_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS HAVE NO HOME DIRECTORIES"
    when: home_check.stdout != ""

  - name: Ensure users' home directories permissions are 750 or more restrictive
    script: users_home_perms.sh
    register: perm_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME HOME DIRECTORIES HAVE EXCESSIVE PERMISSIONS"
    when: perm_check.stdout != ""

  - name: Ensure users own their home directories
    script: users_own_home_dir.sh
    register: own_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS DON'T OWN THEIR HOME DIRECTORIES"
    when: own_check.stdout != ""

  - name: Ensure users' dot files are not group or world writable
    script: users_home_Not_world_writable.sh
    register: writable_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS HOME DIRECTORIES ARE group or world writable"
    when: writable_check.stdout != ""

  - name: Ensure no users have .forward files
    script: users_no_forward.sh
    register: forward_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS HOME DIRECTORIES HAVE  .FORWARD FILE"
    when: forward_check.stdout != ""

  - name: Ensure no users have .netrc files
    script: users_.netrc.sh
    register: netrc_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS HOME DIRECTORIES HAVE .netrc FILE"
    when: netrc_check.stdout != ""

 
  - name: Ensure users' .netrc Files are not group or world accessible
    script: users_netrc_not_world_accessible.sh
    register: netrc_world_writable_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS .netrc ARE GROUP OR WORLD ACCESSIBLE"
    when: netrc_world_writable_check.stdout != ""


  - name: Ensure no users have .rhosts files
    script: users_have_rhosts.sh
    register: users_rhosts_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME USERS HAVE .rhosts FILES"
    when: users_rhosts_check.stdout != ""

  - name: Ensure all groups in /etc/passwd exist in /etc/group
    script: ensure_groups.sh
    register: groups_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....SOME GROUPS IN /etc/passwd DON'T EXIST IN /etc/group"
    when: groups_check.stdout != ""


  - name: Ensure no duplicate UIDs exis
    script: no_duplicate_uids.sh
    register: uids_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....THERE IS DUPLICATE UIDs"
    when: uids_check.stdout != ""

  - name: Ensure no duplicate GIDs exis
    script: no_duplicate_gids.sh
    register: gids_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....THERE IS DUPLICATE gIDs"
    when: gids_check.stdout != ""

  - name: Ensure no duplicate user names exist
    script: no_duplicate_usernames.sh
    register: usernames_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....THERE IS DUPLICATE USERNAMES"
    when: usernames_check.stdout != ""

  - name: Ensure no duplicate group names exist
    script: no_duplicate_groupnames.sh
    register: groupnames_check
    ignore_errors: yes
  - debug:
      msg: "*WARNING....THERE IS DUPLICATE GROUPNAMES"
    when: groupnames_check.stdout != ""


##################
#Handlers
##################
  handlers:
  - name: sleep 
    pause:
     seconds: 7
  - name: update grub
    shell:  grub2-mkconfig > /boot/grub2/grub.cfg
  - name: setting net ipv4 flush param
    shell: sysctl -w net.ipv4.route.flush=1

  - name: reload the rsyslogd configuration
    shell: pkill -HUP rsyslogd
  
  - name: reload the syslog-ng configuration
    shell: pkill -HUP syslog-ng
  
  
